*gin.txt*					Gin makes you drunk with Git

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT License (See LICENSE)


=============================================================================
CONTENTS					*gin-contents*

INTRODUCTION			|gin-introduction|
REQUIREMENTS			|gin-requirements|
USAGE				|gin-usage|
  ACTION			  |gin-action|
INTERFACE			|gin-interface|
  COMMANDS			  |gin-commands|
  FUNCTIONS			  |gin-functions|
  ACTIONS			  |gin-actions|


=============================================================================
INTRODUCTION					*gin-introduction*

Gin ( *gin.vim* ) is a plugin to handle git repository from Vim/Neovim.


=============================================================================
REQUIREMENTS					*gin-requirements*

Gin is written in denops thus users need to install denops.vim

denops.vim~
	An ecosystem for writing Vim/Neovim plugin in Deno.
	https://github.com/vim-denops/denops.vim

Additionally, the following Vim/Neovim plugins are highly recommended to use:

							*gin-guise*
guise.vim~
	To open a new |tabpage| to edit a commit message on "Gin commit".
	https://github.com/lambdalisue/guise.vim~

							*gin-askpass*
askpass.vim~
	To input SSH key passphrase on "Gin push" or so on.
	https://github.com/lambdalisue/askpass.vim
  

=============================================================================
USAGE						*gin-usage*

-----------------------------------------------------------------------------
ACTION						*gin-action*

Action is a special mapping which is defined on a gin buffer and looks like:

	<Plug>(gin-action-{name})

where {name} is a name of the action.

							*gin-action-mapping*
Gin defines the following mappings for actions:

	"?"	List mappings/actions available
	"a"	Open a prompt to input action to execute
	"."	Repeat previous action which has executed from a prompt

Users have to define alternative mappings to disable default mappings like:
>
	" Use g? to show help instead of ?
	nmap <buffer> g? <Plug>(gin-action-help)

See |gin-actions| for all actions available.


=============================================================================
INTERFACE					*gin-interface*

-----------------------------------------------------------------------------
COMMANDS					*gin-commands*

								*:Gin*
:Gin[!] [++worktree={worktree}] {command} [{args}]
:Gin[!] [++opt] [++worktree={worktree}] ++buffer {command} [{args}]
	Call a git raw {command} with {args} asynchronously and echo result on
	a {worktree}.
	For example, "Gin add %" on "hello.txt" invokes "git add hello.txt".
	If a bang (!) is specified, it calls command synchronously instead.
	If no {worktree} is specified, gin will find the one from the current
	working directory.
	If ++buffer option is specified, it opens a |scratch-buffer| to show
	the result of the command.

	Note that users need to install guise.vim (|gin-guise|) to open a
	|tabpage| to edit a commit message on "Gin commit" or so on.

	Note that users need to install askpass.vim (|gin-askpass|) to open a
	prompt to input passphrase on "Gin push" or so on.

								*:GinDiff*
:GinDiff [++opt] [++worktree={worktree}] [{flags}] {path}
:GinDiff [++opt] [++worktree={worktree}] [{flags}] --cached {path}
:GinDiff [++opt] [++worktree={worktree}] [{flags}] {commitish} {path}
	Open a "gin-diff" buffer of a file in a {worktree}.
	If no {worktree} is specified, gin will find the one from the current
	working directory.

	The following {flags} are available:

	--cached
	--renames/--no-renames
	--diff-filter={filter}
	-R
	--ignore-cr-at-eol
	--ignore-space-at-eol
	--ignore-space-change/-b
	--ignore-all-space/-w
	--ignore-blank-lines
	--ignore-matching-lines={regex}/-I={regex}
	--ignore-submodules[=none/untracked/dirty/all]
		
	See ":man git-diff(1)" for detail about {flags}.

								*:GinEdit*
:GinEdit [++opt] [++worktree={worktree}] {path}
:GinEdit [++opt] [++worktree={worktree}] --cached {path}
:GinEdit [++opt] [++worktree={worktree}] {commitish} {path}
	Open a local {path} or "gin-edit" buffer of a file in a {worktree}.
	If no {worktree} is specified, gin will find the one from the current
	working directory.

	If --cached flag is specified, it opens a buffer that shows content
	in INDEX rather than the local working tree. The buffer is modifiable
	and write the buffer to apply changes on INDEX.

	If {commitish} is specified, it opens a buffer that shows content
	in the {commitish} rather than the local working tree.

								*:GinPatch*
:GinPatch [++opt] [++worktree={worktree}] {path}
:GinPatch [++opt] [++worktree={worktree}] --without-head {path}
:GinPatch [++opt] [++worktree={worktree}] --without-worktree {path}
	Open three buffers (HEAD, INDEX, and WORKTREE) to patch changes of
	{path} in a {worktree}. 
	If no {worktree} is specified, gin will find the one from the current
	working directory.
	If --without-head is specified, it does not open a HEAD buffer.
	If --without-worktree is specified, it does not open a WORKTREE
	buffer.

	Users can use the following mappings in each buffers

	HEAD/WORKTREE
	<Plug>(gin-diffput)		Put a diff chunk to INDEX buffer.
					Assigned to "dp" in default.

	WORKTREE
	<Plug>(gin-diffget)		Get a diff chunk from INDEX buffer.
					Assigned to "do" in default.

	INDEX
	<Plug>(gin-diffput)		Put a diff chunk to WORKTREE buffer.
					Assigned to "dp" in default.
	<Plug>(gin-diffget)		Get a diff chunk from WORKTREE or HEAD
					buffer (prefer WORKTREE buffer.)
					Assigned to "do" in default.
	<Plug>(gin-diffget-l)		Get a diff chunk from HEAD buffer.
					Assigned to "dol" in default.
	<Plug>(gin-diffget-r)		Get a diff chunk from WORKTREE buffer.
					Assigned to "dor" in default.

								*:GinStatus*
:GinStatus [++worktree={worktree}] [{flags}]
	Open a "gin-status" buffer to show a status of a {worktree}.
	If no {worktree} is specified, gin will find the one from the current
	working directory.

	The following {flags} are available:

	-u[=no/normal/all], --untracked-files[=no/normal/all]
	--ignore-submodules[=none/untracked/dirty/all]
	--ignored[=traditional/no/matching]
	--renames/--no-renames
	--find-renames[={n}]
		
	See ":man git-status(1)" for detail about {flags}.

-----------------------------------------------------------------------------
FUNCTIONS					*gin-functions*

						*gin#util#reload()*
gin#util#reload([{bufnr}])
	Reload a content of {bufnr} gin buffer.

						*gin#util#expand()*
gin#util#expand([{expr}])
	Like |expand()| but it extract a target filename if the buffer is
	gin's file-like buffer.

						*gin#debug#is_enabled()*
gin#debug#is_enabled()
	Return whether debugging mode enabled or not.
	In debugging mode, gin reports extra information to echo area with
	"[DEBUG]" prefix.

						*gin#debug#enable()*
gin#debug#enable()
	Enable debugging mode. See |gin#debug#is_enabled()| for details.

						*gin#debug#disable()*
gin#debug#disable()
	Disable debugging mode. See |gin#debug#is_enabled()| for details.

						*gin#debug#report()*
gin#debug#report({message})
	Report {message} with "[DEBUG]" prefix only when debugging mode is
	enabled. It is mainly not for users but for plugin developers.

						*gin#action#fn()*
gin#action#fn({callback})
	A wrapper function to make an action mapping.
	The wrapped function is called with {xs} which is a candidate |List|
	when the action is invoked.
	Note that users MUST use <Cmd> pseudokey to define mappings like:
>
	function! s:my_custom(xs) abort
	  echo string(a:xs)
	endfunction

	noremap <buffer> <Plug>(gin-action-my-custom)
	      \ <Cmd>call gin#action#fn({ xs -> <SID>my_custom(xs) })<CR>
<
	WARNING: This API is unstable yet

						*gin#action#call()*
gin#action#call({name}, {range})
	Invoke an action {name} with {range}. The {name} is |String| name and
	the {range} is "[firstline, lastline]" |List|.
	Note that this function uses |feedkeys()| internally.
>
	call gin#action#call('my-custom', [1, 1])
<
	WARNING: This API is unstable yet

	       				*gin#action#list_action()*
gin#action#list_actions()
	List all available actions of the current buffer.
	WARNING: This API is unstable yet

	       				*gin#action#gather_candidates()*
gin#action#gather_candidates({range})
	Gather and return candidates of the current buffer in {range}.
	WARNING: This API is unstable yet

-----------------------------------------------------------------------------
ACTIONS						*gin-actions*

*<Plug>(gin-action-echo)*
	Echo active action candidates for debugging.

*<Plug>(gin-action-choice)*
	Open a prompt to select an action to invoke. It will invoke selected
	action on active action candidates.
	It is mapped to "a" in default when no mapping exists.

*<Plug>(gin-action-repeat)*
	Repeat a previous action triggered from |<Plug>(gin-action-choice)|.
	Note that previous actions triggered from actual mappings are not
	repeated.
	It is mapped to "." in default when no mapping exists.

*<Plug>(gin-action-help)*
	Show action help.
	It is mapped to "?" in default when no mapping exists.
	NOTE: Not implemented yet.

*<Plug>(gin-action-edit=)*
*<Plug>(gin-action-edit:edit)*
*<Plug>(gin-action-edit:split)*
*<Plug>(gin-action-edit:vsplit)*
*<Plug>(gin-action-edit:tabedit)*
*<Plug>(gin-action-edit)*
	Open a new buffer with given command and call |:GinEdit| on active
	action candidates.
	The "=" mapping can be used to define custom actions like
>
	map <buffer>
	      \ <Plug>(gin-action-edit:top)
	      \ <Plug>(gin-action-edit=)topleft\ split<CR>
<
	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-edit:cached=)*
*<Plug>(gin-action-edit:cached:edit)*
*<Plug>(gin-action-edit:cached:split)*
*<Plug>(gin-action-edit:cached:vsplit)*
*<Plug>(gin-action-edit:cached:tabedit)*
*<Plug>(gin-action-edit:cached)*
	Open a new buffer with given command and call |:GinEdit| with the
	"--cached" option on active action candidates.
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-edit:HEAD=)*
*<Plug>(gin-action-edit:HEAD:edit)*
*<Plug>(gin-action-edit:HEAD:split)*
*<Plug>(gin-action-edit:HEAD:vsplit)*
*<Plug>(gin-action-edit:HEAD:tabedit)*
*<Plug>(gin-action-edit:HEAD)*
	Open a new buffer with given command and call |:GinEdit| with
	the commit "HEAD" on active action candidates.
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-diff=)*
*<Plug>(gin-action-diff:edit)*
*<Plug>(gin-action-diff:split)*
*<Plug>(gin-action-diff:vsplit)*
*<Plug>(gin-action-diff:tabedit)*
*<Plug>(gin-action-diff)*
	Open a new buffer with given command and call |:GinDiff| on active
	action candidates (INDEX vs WORKTREE).
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-diff:cached=)*
*<Plug>(gin-action-diff:cached:edit)*
*<Plug>(gin-action-diff:cached:split)*
*<Plug>(gin-action-diff:cached:vsplit)*
*<Plug>(gin-action-diff:cached:tabedit)*
*<Plug>(gin-action-diff:cached)*
	Open a new buffer with given command and call |:GinDiff| with the
	"--cached" option on active action candidates (HEAD vs INDEX).
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-diff:HEAD=)*
*<Plug>(gin-action-diff:HEAD:edit)*
*<Plug>(gin-action-diff:HEAD:split)*
*<Plug>(gin-action-diff:HEAD:vsplit)*
*<Plug>(gin-action-diff:HEAD:tabedit)*
*<Plug>(gin-action-diff:HEAD)*
	Open a new buffer with given command and call |:GinDiff| with the
	commit "HEAD" on active action candidates (HEAD vs WORKTREE).
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-diff:smart=)*
*<Plug>(gin-action-diff:smart:edit)*
*<Plug>(gin-action-diff:smart:split)*
*<Plug>(gin-action-diff:smart:vsplit)*
*<Plug>(gin-action-diff:smart:tabedit)*
*<Plug>(gin-action-diff:smart)*
	Open a new buffer with given command and call |:GinDiff| on active
	action candidates.
	It works like |<Plug>(gin-action-diff)| when there is no staged
	changes. Otherwise it works like |<Plug>(gin-action-diff:cached)|.
	See |<Plug>(gin-action-edit=)| for customization.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-patch)*
*<Plug>(gin-action-patch:head)*
*<Plug>(gin-action-patch:worktree)*
	Call |:GinPatch| on active action candidates to stage changes
	partially.
	If ":head" or ":worktree" variant is used, it call the command with
	"--without-worktree" or "--without-head" respectively.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-add)*
*<Plug>(gin-action-add:intent-to-add)*
	Call "git add" on active action candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-rm)*
*<Plug>(gin-action-rm:force)*
	Call "git rm" on active action candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-reset)*
	Call "git reset" on active action candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-restore)*
*<Plug>(gin-action-restore:staged)*
*<Plug>(gin-action-restore:ours)*
*<Plug>(gin-action-restore:theirs)*
	Call "git restore" on active action candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-stage)*
*<Plug>(gin-action-stage:intent-to-add)*
	Call "git add" or "git rm" on active action candidates. 
	The command will be determined from the status of candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-unstage)*
*<Plug>(gin-action-unstage:intent-to-add)*
	Call "git reset" on active action candidates. If ":intent-to-add"
	variant is used, the result status on "A " (added) candidates will be
	" A" (intent to add) instead of "??" (unknown).

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

*<Plug>(gin-action-stash)*
*<Plug>(gin-action-stash:keep-index)*
	Call "git stash" on active action candidates.

	This actions are enabled on buffers shown by the following commands
	- |:GinStatus|

=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
