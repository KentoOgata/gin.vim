*gin.txt*					Gin makes you drunk with Git

Author:  Alisue <lambdalisue@hashnote.net>
License: MIT License (See LICENSE)


=============================================================================
CONTENTS					*gin-contents*

INTRODUCTION			|gin-introduction|
REQUIREMENTS			|gin-requirements|
USAGE				|gin-usage|
  ACTION			  |gin-action|
  PROXY				  |gin-proxy|
INTERFACE			|gin-interface|
  COMMANDS			  |gin-commands|
  VARIABLES			  |gin-variables|
  FUNCTIONS			  |gin-functions|
  ACTIONS			  |gin-actions|


=============================================================================
INTRODUCTION					*gin-introduction*

Gin ( *gin.vim* ) is a plugin to handle git repository from Vim/Neovim.


=============================================================================
REQUIREMENTS					*gin-requirements*

Gin is written in denops thus users need to install denops.vim

denops.vim~
	An ecosystem for writing Vim/Neovim plugin in Deno.
	https://github.com/vim-denops/denops.vim


=============================================================================
USAGE						*gin-usage*

-----------------------------------------------------------------------------
ACTION						*gin-action*

Action is a special mapping which is defined on a gin buffer and looks like:

	<Plug>(gin-action-{name})

where {name} is a name of the action.

							*gin-action-mapping*
Gin defines the following mappings for actions:

	"?"	List mappings/actions available
	"a"	Open a prompt to input action to execute
	"."	Repeat previous action which has executed from a prompt

Users have to define alternative mappings to disable default mappings like:
>
	" Use g? to show help instead of ?
	nmap <buffer> g? <Plug>(gin-action-help)

See |gin-actions| for all actions available.

-----------------------------------------------------------------------------
PROXY						*gin-proxy*

Gin proxies prompts and editors used by git commands to running Vim by
overriding "GIT_ASKPASS" and "GIT_EDITOR" environment variables.
This means that whether you invoke "git commit" via the "Gin" command or via
the Vim |terminal|, a new buffer will be opened instead of Vim being launched
nested.

This feature is almost equivalent to askpass.vim and/or guise.vim, but
simplified to focus on git.

askpass.vim~
	https://github.com/lambdalisue/askpass.vim

guise.vim~
	https://github.com/lambdalisue/guise.vim

It can live together with the plugins mentioned above because the environment
variable names used are different.

Use |g:gin_proxy_disable_askpass| and/or |g:gin_proxy_disable_editor| to
disable this proxy feature.


=============================================================================
INTERFACE					*gin-interface*

-----------------------------------------------------------------------------
COMMANDS					*gin-commands*

								*:Gin*
:Gin[!] [++{option}...] {command} [{args}]
:Gin[!] [++{option}...] ++buffer {command} [{args}]
	Call a git raw {command} with {args} asynchronously and echo result.
	For example, "Gin add %" on "hello.txt" invokes "git add hello.txt".
	If a bang (!) is specified, it calls command synchronously instead.
	See |gin-command-options| for available {option}s.
	If ++buffer option is specified, it opens a |scratch-buffer| to show
	the result of the command.

	Note that users need to install guise.vim (|gin-guise|) to open a
	|tabpage| to edit a commit message on "Gin commit" or so on.

	Note that users need to install askpass.vim (|gin-askpass|) to open a
	prompt to input passphrase on "Gin push" or so on.

								*:GinBranch*
:GinBranch [++{option}...] [{flags}]
	Open a "gin-branch" buffer to show a branch list.
	See |gin-command-options| for available {option}s.

	The following {flags} are available:

	-a, --all
	-r, --remotes
	-i, --ignore-case
	--abbrev={n}
	--no-abbrev
		
	See ":man git-branch(1)" for detail about {flags}.

	Several default mappings are defined in the buffer. Use "help" action
	to see mappings or disable by |g:gin_branch_disable_default_mappings|.

								*:GinChaperon*
:GinChaperon [++{option}...] [--without-supplements] {path}
:GinChaperon [++{option}...] [--without-supplements] --without-theirs {path}
:GinChaperon [++{option}...] [--without-supplements] --without-ours {path}
	Open three main buffers (THEIRS, WORKTREE, and OURS) and three
	supplemental buffers to solve conflicts on {path}.
	See |gin-command-options| for available {option}s.
	If --without-theirs is specified, it does not open a THEIRS buffer.
	If --without-ours is specified, it does not open a OURS buffer.
	If --without-supplements is specified, it does not open supplemental
	buffers.

	Use |g:gin_chaperon_supplement_height| to regulate the height of
	supplemental buffers.

	Users can use the following mappings in each buffers or disable
	default mappings by |g:gin_chaperon_disable_default_mappings|.

	THEIRS~
	|<Plug>(gin-diffput)|		Put a diff chunk to WORKTREE buffer.
					Assigned to "dp" in default.

	WORKTREE~
	|<Plug>(gin-diffget)|		Get a diff chunk from THEIRS or OURS
					buffer (prefer OURS buffer.)
					Assigned to "do" in default.
	|<Plug>(gin-diffget-l)|		Get a diff chunk from THEIRS buffer.
					Assigned to "dol" in default.
	|<Plug>(gin-diffget-r)|		Get a diff chunk from OURS buffer.
					Assigned to "dor" in default.

	OURS~
	|<Plug>(gin-diffget)|		Get a diff chunk from WORKTREE buffer.
					Assigned to "do" in default.

	NOTE that the buffers appearance order is opposite from 
	"Gina chaperon" if you were user of gina.vim.

								*:GinDiff*
:GinDiff [++{option}...] [{flags}] {path}
:GinDiff [++{option}...] [{flags}] --cached {path}
:GinDiff [++{option}...] [{flags}] {commitish} {path}
	Open a "gin-diff" buffer of a file.
	See |gin-command-options| for available {option}s.

	Users can use the following mappings in each buffers or disable
	default mappings by |g:gin_diff_disable_default_mappings|.

	*<Plug>(gin-diffjump-old)*	Jump to the corresponding line of the
					comparison source.
					Assigned to "g<CR>" in default.

	*<Plug>(gin-diffjump-new)*	Jump to the corresponding line of the
					comparison.
					Assigned to "<CR>" in default.

	The following {flags} are available:

	--cached
	--renames/--no-renames
	--diff-filter={filter}
	-R
	--ignore-cr-at-eol
	--ignore-space-at-eol
	--ignore-space-change/-b
	--ignore-all-space/-w
	--ignore-blank-lines
	--ignore-matching-lines={regex}/-I={regex}
	--ignore-submodules[=none/untracked/dirty/all]
		
	See ":man git-diff(1)" for detail about {flags}.

								*:GinEdit*
:GinEdit [++{option}...] {path}
:GinEdit [++{option}...] --cached {path}
:GinEdit [++{option}...] {commitish} {path}
	Open a local {path} or "gin-edit" buffer of a file in a {worktree}.
	See |gin-command-options| for available {option}s.

	If --cached flag is specified, it opens a buffer that shows content
	in INDEX rather than the local working tree. The buffer is modifiable
	and write the buffer to apply changes on INDEX.

	If {commitish} is specified, it opens a buffer that shows content
	in the {commitish} rather than the local working tree.

								*:GinPatch*
:GinPatch [++{option}...] {path}
:GinPatch [++{option}...] --without-head {path}
:GinPatch [++{option}...] --without-worktree {path}
	Open three buffers (HEAD, INDEX, and WORKTREE) to patch changes of
	{path}.
	See |gin-command-options| for available {option}s.
	If --without-head is specified, it does not open a HEAD buffer.
	If --without-worktree is specified, it does not open a WORKTREE
	buffer.

	Users can use the following mappings in each buffers or disable
	default mappings by |g:gin_patch_disable_default_mappings|.


	HEAD~
	|<Plug>(gin-diffput)|		Put a diff chunk to INDEX buffer.
					Assigned to "dp" in default.

	INDEX~
	*<Plug>(gin-diffput)*		Put a diff chunk to WORKTREE buffer.
					Assigned to "dp" in default.
	*<Plug>(gin-diffget)*		Get a diff chunk from WORKTREE or HEAD
					buffer (prefer WORKTREE buffer.)
					Assigned to "do" in default.
	*<Plug>(gin-diffget-l)*		Get a diff chunk from HEAD buffer.
					Assigned to "dol" in default.
	*<Plug>(gin-diffget-r)*		Get a diff chunk from WORKTREE buffer.
					Assigned to "dor" in default.

	WORKTREE~
	|<Plug>(gin-diffput)|		Put a diff chunk to INDEX buffer.
					Assigned to "dp" in default.
	|<Plug>(gin-diffget)|		Get a diff chunk from INDEX buffer.
					Assigned to "do" in default.

								*:GinStatus*
:GinStatus [++{option}...] [{flags}]
	Open a "gin-status" buffer to show a status.
	See |gin-command-options| for available {option}s.

	The following {flags} are available:

	-u[=no/normal/all], --untracked-files[=no/normal/all]
	--ignore-submodules[=none/untracked/dirty/all]
	--ignored[=traditional/no/matching]
	--renames/--no-renames
	--find-renames[={n}]
		
	See ":man git-status(1)" for detail about {flags}.

	Several default mappings are defined in the buffer. Use "help" action
	to see mappings or disable by |g:gin_status_disable_default_mappings|.

							*gin-command-options*
Gin supports several options starts with double plus signs (++) as:

++worktree={worktree}
	Specify a particular git working tree. If this option is not
	specified, gin will find the one from the current buffer or the
	current working directory.
>
	:GinStatus ++worktree=/home/john/project\ A
<
++enc={encoding}/++encoding={encoding}
	Specify 'fileencoding' option of the buffer. This option is only
	available on Gin commands that open buffer(s).
>
	:GinEdit ++enc=sjis README.md
<
++ff={fileformat}/++fileformat={fileformat}
	Specify 'fileformat' option of the buffer. This option is only
	available on Gin commands that open buffer(s).
>
	:GinDiff ++ff=mac README.md
<

-----------------------------------------------------------------------------
VARIABLES					*gin-variables*

*g:gin_chaperon_disable_default_mappings*
	Disable default mappings on buffers shown by `:GinChaperon`.

	Default: 0

*g:gin_chaperon_supplement_height*
	|Number| that indicates the height of supplemental buffers of
	|:GinChaperon| command.

	Default: 10

*g:gin_diff_disable_default_mappings*
	Disable default mappings on buffers shown by `:GinDiff`.

	Default: 0

*g:gin_patch_disable_default_mappings*
	Disable default mappings on buffers shown by `:GinPatch`.

	Default: 0

*g:gin_proxy_disable_askpass*
	Disable overriding "GIT_ASKPASS" to proxy prompts.

	Default: 0

*g:gin_proxy_disable_editor*
	Disable overriding "GIT_EDITOR" to proxy editors.

	Default: 0

*g:gin_status_disable_default_mappings*
	Disable default mappings on `:GinStatus` buffer.

	Default: 0

-----------------------------------------------------------------------------
FUNCTIONS					*gin-functions*

						*gin#util#reload()*
gin#util#reload([{bufnr}])
	Reload a content of {bufnr} gin buffer.

						*gin#util#expand()*
gin#util#expand([{expr}])
	Like |expand()| but it extract a target filename if the buffer is
	gin's file-like buffer.

						*gin#action#fn()*
gin#action#fn({callback})
	A wrapper function to make an action mapping.
	The wrapped function is called with {xs} which is a candidate |List|
	when the action is invoked.
	Note that users MUST use <Cmd> pseudokey to define mappings like:
>
	function! s:my_custom(xs) abort
	  echo string(a:xs)
	endfunction

	noremap <buffer> <Plug>(gin-action-my-custom)
	      \ <Cmd>call gin#action#fn({ xs -> <SID>my_custom(xs) })<CR>
<
						*gin#action#call()*
gin#action#call({name}, {range})
	Invoke an action {name} with {range}. The {name} is |String| name and
	the {range} is "[firstline, lastline]" |List|.
	Note that this function uses |feedkeys()| internally.
>
	call gin#action#call('my-custom', [1, 1])
<
	       				*gin#action#list_action()*
gin#action#list_actions()
	List all available actions of the current buffer.

	       				*gin#action#gather_candidates()*
gin#action#gather_candidates({range})
	Gather and return candidates of the current buffer in {range}.

-----------------------------------------------------------------------------
ACTIONS						*gin-actions*

*<Plug>(gin-action-echo)*
	Echo active action candidates for debugging.

*<Plug>(gin-action-choice)*
	Open a prompt to select an action to invoke. It will invoke selected
	action on active action candidates.
	It is mapped to "a" in default when no mapping exists.

*<Plug>(gin-action-repeat)*
	Repeat a previous action triggered from |<Plug>(gin-action-choice)|.
	Note that previous actions triggered from actual mappings are not
	repeated.
	It is mapped to "." in default when no mapping exists.

*<Plug>(gin-action-help)*
*<Plug>(gin-action-help:all)*
	Show action help.
	It is mapped to "?" in default when no mapping exists.

*<Plug>(gin-action-edit=)*
*<Plug>(gin-action-edit:edit)*
*<Plug>(gin-action-edit:split)*
*<Plug>(gin-action-edit:vsplit)*
*<Plug>(gin-action-edit:tabedit)*
*<Plug>(gin-action-edit)*
	Aliases to |<Plug>(gin-action-edit:local)| variants. Re-define those
	mappings to change behavior of "edit" action variants

*<Plug>(gin-action-edit:local=)*
*<Plug>(gin-action-edit:local:edit)*
*<Plug>(gin-action-edit:local:split)*
*<Plug>(gin-action-edit:local:vsplit)*
*<Plug>(gin-action-edit:local:tabedit)*
*<Plug>(gin-action-edit:local)*
	Open a new buffer with given command and call |:GinEdit| on active
	action candidates.

*<Plug>(gin-action-edit:cached=)*
*<Plug>(gin-action-edit:cached:edit)*
*<Plug>(gin-action-edit:cached:split)*
*<Plug>(gin-action-edit:cached:vsplit)*
*<Plug>(gin-action-edit:cached:tabedit)*
*<Plug>(gin-action-edit:cached)*
	Open a new buffer with given command and call |:GinEdit| with the
	"--cached" option on active action candidates.

*<Plug>(gin-action-edit:HEAD=)*
*<Plug>(gin-action-edit:HEAD:edit)*
*<Plug>(gin-action-edit:HEAD:split)*
*<Plug>(gin-action-edit:HEAD:vsplit)*
*<Plug>(gin-action-edit:HEAD:tabedit)*
*<Plug>(gin-action-edit:HEAD)*
	Open a new buffer with given command and call |:GinEdit| with
	the commit "HEAD" on active action candidates.

*<Plug>(gin-action-diff=)*
*<Plug>(gin-action-diff:edit)*
*<Plug>(gin-action-diff:split)*
*<Plug>(gin-action-diff:vsplit)*
*<Plug>(gin-action-diff:tabedit)*
*<Plug>(gin-action-diff)*
	Aliases to |<Plug>(gin-action-diff:smart)| variants. Re-define those
	mappings to change behavior of "diff" action variants

*<Plug>(gin-action-diff:local=)*
*<Plug>(gin-action-diff:local:edit)*
*<Plug>(gin-action-diff:local:split)*
*<Plug>(gin-action-diff:local:vsplit)*
*<Plug>(gin-action-diff:local:tabedit)*
*<Plug>(gin-action-diff:local)*
	Open a new buffer with given command and call |:GinDiff| on active
	action candidates (INDEX vs WORKTREE).

*<Plug>(gin-action-diff:cached=)*
*<Plug>(gin-action-diff:cached:edit)*
*<Plug>(gin-action-diff:cached:split)*
*<Plug>(gin-action-diff:cached:vsplit)*
*<Plug>(gin-action-diff:cached:tabedit)*
*<Plug>(gin-action-diff:cached)*
	Open a new buffer with given command and call |:GinDiff| with the
	"--cached" option on active action candidates (HEAD vs INDEX).

*<Plug>(gin-action-diff:HEAD=)*
*<Plug>(gin-action-diff:HEAD:edit)*
*<Plug>(gin-action-diff:HEAD:split)*
*<Plug>(gin-action-diff:HEAD:vsplit)*
*<Plug>(gin-action-diff:HEAD:tabedit)*
*<Plug>(gin-action-diff:HEAD)*
	Open a new buffer with given command and call |:GinDiff| with the
	commit "HEAD" on active action candidates (HEAD vs WORKTREE).

*<Plug>(gin-action-diff:smart=)*
*<Plug>(gin-action-diff:smart:edit)*
*<Plug>(gin-action-diff:smart:split)*
*<Plug>(gin-action-diff:smart:vsplit)*
*<Plug>(gin-action-diff:smart:tabedit)*
*<Plug>(gin-action-diff:smart)*
	Open a new buffer with given command and call |:GinDiff| on active
	action candidates.
	It works like |<Plug>(gin-action-diff)| when there is no staged
	changes. Otherwise it works like |<Plug>(gin-action-diff:cached)|.

*<Plug>(gin-action-chaperon)*
*<Plug>(gin-action-chaperon:theirs)*
*<Plug>(gin-action-chaperon:ours)*
*<Plug>(gin-action-chaperon:supplements)*
*<Plug>(gin-action-chaperon:supplements:theirs)*
*<Plug>(gin-action-chaperon:supplements:ours)*
*<Plug>(gin-action-chaperon:nosupplements)*
*<Plug>(gin-action-chaperon:nosupplements:theirs)*
*<Plug>(gin-action-chaperon:nosupplements:ours)*
	Call |:GinChaperon| on active action candidates to solve conflicts.
	If ":theirs" or ":ours" variant is used, it call the command with
	"--without-ours" or "--without-theirs" respectively.
	If ":nosupplements" variant is used, it call the command with
	"--without-supplements".
	Variants without ":supplements" or ":nosupplements" are aliased to
	":supplements" variants.

*<Plug>(gin-action-patch)*
*<Plug>(gin-action-patch:head)*
*<Plug>(gin-action-patch:worktree)*
	Call |:GinPatch| on active action candidates to stage changes
	partially.
	If ":head" or ":worktree" variant is used, it call the command with
	"--without-worktree" or "--without-head" respectively.

*<Plug>(gin-action-add)*
*<Plug>(gin-action-add:intent-to-add)*
	Call "git add" on active action candidates.

*<Plug>(gin-action-rm)*
*<Plug>(gin-action-rm:force)*
	Call "git rm" on active action candidates.

*<Plug>(gin-action-reset)*
	Call "git reset" on active action candidates.

*<Plug>(gin-action-restore)*
*<Plug>(gin-action-restore:staged)*
*<Plug>(gin-action-restore:ours)*
*<Plug>(gin-action-restore:theirs)*
*<Plug>(gin-action-restore:conflict)*
*<Plug>(gin-action-restore:conflict:merge)*
*<Plug>(gin-action-restore:conflict:diff3)*
	Call "git restore" on active action candidates.

*<Plug>(gin-action-stage)*
*<Plug>(gin-action-stage:intent-to-add)*
	Call "git add" or "git rm" on active action candidates. 
	The command will be determined from the status of candidates.

*<Plug>(gin-action-unstage)*
*<Plug>(gin-action-unstage:intent-to-add)*
	Call "git reset" on active action candidates. If ":intent-to-add"
	variant is used, the result status on "A " (added) candidates will be
	" A" (intent to add) instead of "??" (unknown).

*<Plug>(gin-action-stash)*
*<Plug>(gin-action-stash:keep-index)*
	Call "git stash" on active action candidates.


=============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
